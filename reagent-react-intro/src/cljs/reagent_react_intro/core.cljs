(ns reagent-react-intro.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to reagent-react-intro"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of reagent-react-intro"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of reagent-react-intro"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of reagent-react-intro")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About reagent-react-intro"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Components
; (defn comment-list []
;   [:div.commentList
;    "Hello, world! I am a CommentList"])

(defn comment-item [author & children]
  (into [:div.comment
         [:h2.commentAuthor author]]
        children))

(defn comment-item [first-comp & rest-comp]
  (let [this (reagent/current-component)]
    [:div 
     [:p "The 'props' propertity: " (str (reagent/props this))]
     [:p "The first component: " (str first-comp)]
     [:p "The children component: " (str (reagent/children this))]]))

(defn comment-list []
  [:div.commentList []
   [comment-item "Pete Hunt" "This is one comment"]
   [comment-item "Jordan Walke" "This is *another* comment"]])

(defn comment-form []
  [:div.commentForm
   "Hello, world! I am a CommentForm"])

(defn comment-box []
  [:div.commentBox
     [:h1 "Comments"]
     [comment-list]
     [comment-form]])




;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About reagent-react-intro"]]]
       [page]
       [:footer
        [:p "reagent-react-intro was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [comment-box] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
        
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
